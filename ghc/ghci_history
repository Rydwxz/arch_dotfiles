let 
:t foldr
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
sortSublistByLen [[1],[2,2],[3,3,3]]
sortSublistByLen [[1],[2,2],[3,3,3]]
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:reload
mirror "dralloc"
mirror dralloc
:reload
:reload
:reload
:reload
:reload
:reload
:reload
:relaod
mean [1,2,2,3]
mean [1,2,3,4]
:reload
length ""
length [2,3,4]
length [a,b,c]
len [1,2,3]
len []
len "a"
"1"
len ""
len "spock"
:reload
:reload
:reload
:reload
:t t
let t = MTree Nothing Nothing 1
:t t
let t = MTree 
:t t
let t = MTree 1 Nothing Nothing
:reload
:t Maybe 12
:t Maybe
:reload
:reload
:reload
:reload
:load realworld.hs 
:load realworld.hs 
:load realworld.hs 
:load realworld.hs 
:load realworld.hs 
toList l
let l = Cons 'a' (Cons 'b' Nil)
:load realworld.hs 
toList l
let l = Cons 'a' (Cons 'b' Nil)
:load realworld.hs 
:load realworld.hs 
toList l
let l = Cons 'a' (Cons 'b' Nil)
:load realworld.hs 
toList l
let l = Cons 'a' (Cons 'b' Nil)
let l = Cons 'a' (Cons 'b' 'c')
:load realworld.hs 
:load realworld.hs 
:load realworld.hs 
:load realworld.hs 
lastButOne [1]
lastButOne [1,2]
